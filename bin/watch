#!/usr/bin/env ruby

#
# Monitors the current theme directory for changes and
# automatically copies them to the web root.  Based on
# the Jekyll build --watch option.
#
#

require_relative '../lib/rb/tallyman'

script_location = File.expand_path File.dirname(__FILE__)
to_load = script_location + '/../config/config.properties'
load to_load

require 'directory_watcher'
@theme_root = script_location + '/../data/themes/' + @theme + '/'

puts 'Source : ' + @theme_root
puts 'Destination : ' + @webRoot

def _globs(source, destination)
      Dir.chdir(source) do
        dirs = Dir['*'].select { |x| File.directory?(x) }
        dirs -= [destination, File.expand_path(destination), File.basename(destination)]
        dirs = dirs.map { |x| "#{x}/**/*" }
        dirs += ['*']
      end
end

# DirectoryWatcher::Event
def _handle_file_change(event)
    # Assumes files was modified.  Doesn't handle deletes...

    full_path = event.path
    rel_path = full_path.sub @theme_root, ''
    # remove theme_root from path to get relative path
    cmd = "cp #{full_path} #{@webRoot}#{rel_path}"

    `#{cmd}`

end

dw = DirectoryWatcher.new(@theme_root, :glob => _globs(@theme_root, @webRoot), :pre_load => true)
dw.interval = 1

dw.add_observer do |*events|
  t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
  puts "Copying: " + "#{events.size} files at #{t} "
  events.each do |event|
    _handle_file_change(event)
  end
end

dw.start

trap("INT") do
  puts "     Halting auto-copy."
  exit 0
end

loop { sleep 1000 }