#!/usr/bin/env ruby

require 'ppcurses'
require 'rubygems'
require 'sqlite3'
require_relative '../lib/rb/lift_action'
require_relative '../lib/rb/count_action'
require_relative '../lib/rb/database_proxy'

load '../config/config.properties'

def get_data(db)
  lift_rep_menu = PPCurses::RadioMenu.new( @liftReps , nil )
  lift_type_menu = PPCurses::Menu.new( @lifts, nil )

  lifts_menu = PPCurses::CompositeMenu.new( lift_type_menu, lift_rep_menu )
  add_lift_action = LiftAction.new( lift_type_menu, lift_rep_menu, db )

  lift_type_menu.setGlobalAction(add_lift_action)

  book_action = PPCurses::InsertSQLDataAction.new(
                 [PPCurses::GetStringAction.new('Book title: '),
                  PPCurses::GetStringAction.new('Author: '),
                  PPCurses::GetIntegerAction.new('Number of pages: '),
                  PPCurses::GetBooleanAction.new('Digital? '), ],
    'INSERT into books(title, author, pages, digital) values (?, ?, ?, ?)', db )


  music_action = PPCurses::InsertSQLDataAction.new(
                  [PPCurses::GetEnumeratedStringAction.new('Media Type? ',
                                                           %w(CD Vinyl MP3)),
                   PPCurses::GetStringAction.new('Artist: '),
                   PPCurses::GetStringAction.new('Album Title: '),
                   PPCurses::GetIntegerAction.new('Price: '),
                   PPCurses::GetBooleanAction.new('Used? '), ],
                  'INSERT into music(media, artist, albumTitle, price, used) values (?, ?, ?, ?, ?)', db )


  lifts_action = PPCurses::ShowMenuAction.new(lifts_menu)
  count_action = CountAction.new(db)
  count_menu_action = PPCurses::ShowMenuAction.new(count_action.menu)

  main_menu = PPCurses::Menu.new( @mainMenuValues ,
                       [ lifts_action, music_action, book_action, count_menu_action] )

  main_menu.show()
  main_menu.getMenuSelection()
  
  main_menu.close()
end

db = DatabaseProxy.open( @dbName )

begin

  screen = PPCurses::Screen.new()
  screen.run { get_data(db) }
rescue SystemExit, Interrupt
  # Empty Catch block so ruby doesn't puke out
  # a stack trace when CTRL-C is used
ensure
  db.close if db
end

# adminInterface return values:
# ----------------------------
# 0 - interface ran but nothing inserted
# 1 - an error occurred running the interface
# 2 - 1 or more insert statements to the database occurred
#
exit db.exitCode