#!/usr/bin/env ruby

#noinspection RubyResolve
require 'sqlite3'
require 'ppcurses'
require 'rubygems'

require_relative '../lib/rb/tallyman'

load '../config/config.properties'

#noinspection RubyResolve
def get_data(db)
  lift_rep_menu = PPCurses::RadioMenu.new( @lift_reps , nil )
  lift_type_menu = PPCurses::Menu.new( @lifts, nil )

  lifts_menu = PPCurses::CompositeMenu.new( lift_type_menu, lift_rep_menu )
  add_lift_action = LiftAction.new( lift_type_menu, lift_rep_menu, db )

  lift_type_menu.set_global_action(add_lift_action)

  book_action = BookAction.new(db)
  music_action = MusicAction.new(db)

  lifts_action = PPCurses::ShowMenuAction.new(lifts_menu)
  count_action = CountAction.new(db)
  count_menu_action = PPCurses::ShowMenuAction.new(count_action.menu)

  main_menu = PPCurses::Menu.new( @mainMenuValues ,
                       [ lifts_action, music_action, book_action, count_menu_action] )

  main_menu.show()
  main_menu.menu_selection()
  
  main_menu.close()
end

# adminInterface return values:
# ----------------------------
# 0 - interface ran but nothing inserted
# 1 - an error occurred running the interface
# 2 - 1 or more insert statements to the database occurred
#
def determine_exit_code(db)
  if db.insert_count > 0 then 2 else 0 end
end

#noinspection RubyResolve
db = DatabaseProxy.open( @dbName )

begin

  screen = PPCurses::Screen.new()
  screen.run { get_data(db) }
rescue SystemExit, Interrupt
  # Empty Catch block so ruby doesn't puke out
  # a stack trace when CTRL-C is used
ensure
  db.close if db
end

generator = DeltaGenerator.new(db.modified_table_set)
generator.generate('../data/delta.xml')

exit determine_exit_code(db)