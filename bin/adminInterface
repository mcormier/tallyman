#!/usr/bin/env ruby

require 'ppcurses'
require 'rubygems'
require "sqlite3"
require_relative 'LiftAction.rb'
require_relative 'CountAction.rb'
require_relative 'database_proxy'

load '../config/config.properties'

def getData(db)
  liftRepMenu = PPCurses::RadioMenu.new( @liftReps , nil )
  liftTypeMenu = PPCurses::Menu.new( @lifts, nil )

  liftsMenu = PPCurses::CompositeMenu.new( liftTypeMenu, liftRepMenu )
  addLiftAction = LiftAction.new( liftTypeMenu, liftRepMenu, db )

  liftTypeMenu.setGlobalAction(addLiftAction)

  bookAction = PPCurses::InsertSQLDataAction.new(
                 [PPCurses::GetStringAction.new("Book title: "),
                  PPCurses::GetStringAction.new("Author: "),
                  PPCurses::GetIntegerAction.new("Number of pages: "),
                  PPCurses::GetBooleanAction.new("Digital? "), ],
    "INSERT into books(title, author, pages, digital)" +
    " values (?, ?, ?, ?)", db )


  musicAction = PPCurses::InsertSQLDataAction.new(
                  [PPCurses::GetEnumeratedStringAction.new("Media Type? ",
                                                 ["CD", "Vinyl", "MP3"] ),
                   PPCurses::GetStringAction.new("Artist: "),
                   PPCurses::GetStringAction.new("Album Title: "),
                   PPCurses::GetIntegerAction.new("Price: "),
                   PPCurses::GetBooleanAction.new("Used? "), ],
    "INSERT into music(media, artist, albumTitle, price, used)" +
    " values (?, ?, ?, ?, ?)", db )


  liftsAction = PPCurses::ShowMenuAction.new(liftsMenu)
  countAction = CountAction.new(db)
  countMenuAction = PPCurses::ShowMenuAction.new(countAction.menu)

  mainMenu = PPCurses::Menu.new( @mainMenuValues ,
                       [ liftsAction, musicAction, bookAction, countMenuAction] )

  mainMenu.show()
  mainMenu.getMenuSelection() 
  
  mainMenu.close()
end

db = DatabaseProxy.open( @dbName )

begin

  screen = PPCurses::Screen.new()
  screen.run { getData(db) }
rescue SystemExit, Interrupt
  # Empty Catch block so ruby doesn't puke out
  # a stack trace when CTRL-C is used
ensure
  db.close if db
end

exit db.insertCount